require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 5000;

app.use(express.json());
app.use(cors());

// ðŸ”¹ MongoDB Atlas baÄŸlantÄ±sÄ± (Bunu Render'da ekleyeceÄŸiz)
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// ðŸ”¹ SayaÃ§ iÃ§in MongoDB ÅŸemasÄ±
const CounterSchema = new mongoose.Schema({
    count: { type: Number, default: 0 },
});
const Counter = mongoose.model("Counter", CounterSchema);

// ðŸ”¹ EÄŸer veritabanÄ±nda sayaÃ§ yoksa bir tane oluÅŸtur
async function initCounter() {
    const existingCounter = await Counter.findOne();
    if (!existingCounter) {
        await new Counter({ count: 0 }).save();
    }
}
initCounter();

// ðŸ”¹ SayaÃ§ deÄŸerini getir
app.get("/getCount", async (req, res) => {
    const counter = await Counter.findOne();
    res.json({ count: counter.count });
});

// ðŸ”¹ SayaÃ§ deÄŸerini artÄ±r
app.post("/increment", async (req, res) => {
    const counter = await Counter.findOne();
    counter.count += 1;
    await counter.save();
    res.json({ count: counter.count });
});

// ðŸ”¹ Sunucuyu baÅŸlat
app.listen(PORT, () => {
    console.log(`ðŸš€ Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor...`);
});
